
//////// Time ago
//Constants
#define SECOND 1
#define MINUTE (60 * SECOND)
#define HOUR (60 * MINUTE)
#define DAY (24 * HOUR)
#define MONTH (30 * DAY)

- (NSString*)timeIntervalWithStartDate:(NSDate*)d1 withEndDate:(NSDate*)d2
{
    //Calculate the delta in seconds between the two dates
    NSTimeInterval delta = [d2 timeIntervalSinceDate:d1];

    if (delta < 1 * MINUTE)
    {
        return delta == 1 ? @"one second ago" : [NSString stringWithFormat:@"%d seconds ago", (int)delta];
    }
    if (delta < 2 * MINUTE)
    {
        return @"a minute ago";
    }
    if (delta < 45 * MINUTE)
    {
        int minutes = floor((double)delta/MINUTE);
        return [NSString stringWithFormat:@"%d minutes ago", minutes];
    }
    if (delta < 90 * MINUTE)
    {
        return @"an hour ago";
    }
    if (delta < 24 * HOUR)
    {
        int hours = floor((double)delta/HOUR);
        return [NSString stringWithFormat:@"%d hours ago", hours];
    }
    if (delta < 48 * HOUR)
    {
        return @"yesterday";
    }
    if (delta < 30 * DAY)
    {
        int days = floor((double)delta/DAY);
        return [NSString stringWithFormat:@"%d days ago", days];
    }
    if (delta < 12 * MONTH)
    {
        int months = floor((double)delta/MONTH);
        return months <= 1 ? @"one month ago" : [NSString stringWithFormat:@"%d months ago", months];
    }
    else
    {
        int years = floor((double)delta/MONTH/12.0);
        return years <= 1 ? @"one year ago" : [NSString stringWithFormat:@"%d years ago", years];
    }
}


 NSString *fileName = @"database.sqlite";
        NSString *dbDocPath = [NSString stringWithFormat:@"%@/Documents/%@", NSHomeDirectory(), fileName];
        NSFileManager *fileManager = [NSFileManager defaultManager];
        if (![fileManager fileExistsAtPath:dbDocPath]) {
            NSString *dbBundlePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:fileName];
            NSError *error = nil;
            [fileManager copyItemAtPath:dbBundlePath toPath:dbDocPath error:&error];
            if (error) {
                NSLog(@"Check Database Error: %@", error.description);
            }
        }
        if(sqlite3_open([dbDocPath UTF8String], &_database) != SQLITE_OK){
            NSLog(@"Failed to open database!");
        }
    
 
 
 MD 5
 
 [12/21/12 11:35:16 AM] Mr.Q: import cái này vào #import <CommonCrypto/CommonDigest.h>
[12/21/12 11:35:23 AM] Mr.Q: framework nhé
[12/21/12 11:35:28 AM] boy saudoi: rồi cậu
[12/21/12 11:35:29 AM] boy saudoi: ^^
[12/21/12 11:35:51 AM] Mr.Q: rồi khai báo : 
@interface NSString (MD5)

- (NSString *)MD5String;

@end
trên cùng
[12/21/12 11:36:03 AM] Mr.Q: tiếp tục
[12/21/12 11:36:04 AM] Mr.Q: @implementation NSString (MD5)

- (NSString *)MD5String {
const char *cstr = [self UTF8String];
unsigned char result[16];
CC_MD5(cstr, strlen(cstr), result);

return [NSString stringWithFormat:
        @"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",
        result[0], result[1], result[2], result[3], 
        result[4], result[5], result[6], result[7],
        result[8], result[9], result[10], result[11],
        result[12], result[13], result[14], result[15]
        ];  
}
 
 
 
 